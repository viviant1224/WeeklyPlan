package cn.viviant.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import cn.viviant.bean.Userinfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USERINFO.
*/
public class UserinfoDao extends AbstractDao<Userinfo, Long> {

    public static final String TABLENAME = "USERINFO";

    /**
     * Properties of entity Userinfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property Sex = new Property(2, String.class, "sex", false, "SEX");
        public final static Property UserEmail = new Property(3, String.class, "userEmail", false, "USER_EMAIL");
        public final static Property UserImage = new Property(4, String.class, "userImage", false, "USER_IMAGE");
        public final static Property RegisterDate = new Property(5, String.class, "registerDate", false, "REGISTER_DATE");
        public final static Property FlagVip = new Property(6, Boolean.class, "flagVip", false, "FLAG_VIP");
        public final static Property FlagLogout = new Property(7, Boolean.class, "flagLogout", false, "FLAG_LOGOUT");
        public final static Property State = new Property(8, Integer.class, "state", false, "STATE");
        public final static Property Telphone = new Property(9, String.class, "telphone", false, "TELPHONE");
        public final static Property Address = new Property(10, String.class, "address", false, "ADDRESS");
    };


    public UserinfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserinfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USERINFO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'USERNAME' TEXT NOT NULL ," + // 1: username
                "'SEX' TEXT," + // 2: sex
                "'USER_EMAIL' TEXT," + // 3: userEmail
                "'USER_IMAGE' TEXT," + // 4: userImage
                "'REGISTER_DATE' TEXT," + // 5: registerDate
                "'FLAG_VIP' INTEGER," + // 6: flagVip
                "'FLAG_LOGOUT' INTEGER," + // 7: flagLogout
                "'STATE' INTEGER," + // 8: state
                "'TELPHONE' TEXT," + // 9: telphone
                "'ADDRESS' TEXT);"); // 10: address
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USERINFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Userinfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUsername());
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(3, sex);
        }
 
        String userEmail = entity.getUserEmail();
        if (userEmail != null) {
            stmt.bindString(4, userEmail);
        }
 
        String userImage = entity.getUserImage();
        if (userImage != null) {
            stmt.bindString(5, userImage);
        }
 
        String registerDate = entity.getRegisterDate();
        if (registerDate != null) {
            stmt.bindString(6, registerDate);
        }
 
        Boolean flagVip = entity.getFlagVip();
        if (flagVip != null) {
            stmt.bindLong(7, flagVip ? 1l: 0l);
        }
 
        Boolean flagLogout = entity.getFlagLogout();
        if (flagLogout != null) {
            stmt.bindLong(8, flagLogout ? 1l: 0l);
        }
 
        Integer state = entity.getState();
        if (state != null) {
            stmt.bindLong(9, state);
        }
 
        String telphone = entity.getTelphone();
        if (telphone != null) {
            stmt.bindString(10, telphone);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(11, address);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Userinfo readEntity(Cursor cursor, int offset) {
        Userinfo entity = new Userinfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sex
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userEmail
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userImage
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // registerDate
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // flagVip
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // flagLogout
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // state
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // telphone
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // address
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Userinfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUsername(cursor.getString(offset + 1));
        entity.setSex(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserEmail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserImage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRegisterDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFlagVip(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setFlagLogout(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setState(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setTelphone(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAddress(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Userinfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Userinfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
