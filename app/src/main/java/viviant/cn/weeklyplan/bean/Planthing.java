package viviant.cn.weeklyplan.bean;

import java.io.Serializable;
import java.util.List;
import viviant.cn.weeklyplan.bean.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table PLANTHING.
 */
public class Planthing implements Serializable{

    private Long id;
    /** Not-null value. */
    private String planthingName;
    private String planthingDescription;
    /** Not-null value. */
    private String doDateTime;
    /** Not-null value. */
    private String endDateTime;
    private String planThingPlace;
    private Boolean flagRemind;
    private String remindDate;
    private Integer state;
    private long levelId;
    private long tagId;
    private long roleId;
    private long userinfoPId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PlanthingDao myDao;

    private List<Tag> tags;

    public Planthing() {
    }

    public Planthing(Long id) {
        this.id = id;
    }

    public Planthing(Long id, String planthingName, String planthingDescription, String doDateTime, String endDateTime, String planThingPlace, Boolean flagRemind, String remindDate, Integer state, long levelId, long tagId, long roleId, long userinfoPId) {
        this.id = id;
        this.planthingName = planthingName;
        this.planthingDescription = planthingDescription;
        this.doDateTime = doDateTime;
        this.endDateTime = endDateTime;
        this.planThingPlace = planThingPlace;
        this.flagRemind = flagRemind;
        this.remindDate = remindDate;
        this.state = state;
        this.levelId = levelId;
        this.tagId = tagId;
        this.roleId = roleId;
        this.userinfoPId = userinfoPId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPlanthingDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getPlanthingName() {
        return planthingName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPlanthingName(String planthingName) {
        this.planthingName = planthingName;
    }

    public String getPlanthingDescription() {
        return planthingDescription;
    }

    public void setPlanthingDescription(String planthingDescription) {
        this.planthingDescription = planthingDescription;
    }

    /** Not-null value. */
    public String getDoDateTime() {
        return doDateTime;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDoDateTime(String doDateTime) {
        this.doDateTime = doDateTime;
    }

    /** Not-null value. */
    public String getEndDateTime() {
        return endDateTime;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setEndDateTime(String endDateTime) {
        this.endDateTime = endDateTime;
    }

    public String getPlanThingPlace() {
        return planThingPlace;
    }

    public void setPlanThingPlace(String planThingPlace) {
        this.planThingPlace = planThingPlace;
    }

    public Boolean getFlagRemind() {
        return flagRemind;
    }

    public void setFlagRemind(Boolean flagRemind) {
        this.flagRemind = flagRemind;
    }

    public String getRemindDate() {
        return remindDate;
    }

    public void setRemindDate(String remindDate) {
        this.remindDate = remindDate;
    }

    public Integer getState() {
        return state;
    }

    public void setState(Integer state) {
        this.state = state;
    }

    public long getLevelId() {
        return levelId;
    }

    public void setLevelId(long levelId) {
        this.levelId = levelId;
    }

    public long getTagId() {
        return tagId;
    }

    public void setTagId(long tagId) {
        this.tagId = tagId;
    }

    public long getRoleId() {
        return roleId;
    }

    public void setRoleId(long roleId) {
        this.roleId = roleId;
    }

    public long getUserinfoPId() {
        return userinfoPId;
    }

    public void setUserinfoPId(long userinfoPId) {
        this.userinfoPId = userinfoPId;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Tag> getTags() {
        if (tags == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TagDao targetDao = daoSession.getTagDao();
            List<Tag> tagsNew = targetDao._queryPlanthing_Tags(id);
            synchronized (this) {
                if(tags == null) {
                    tags = tagsNew;
                }
            }
        }
        return tags;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTags() {
        tags = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
