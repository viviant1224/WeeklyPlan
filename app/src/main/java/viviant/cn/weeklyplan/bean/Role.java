package viviant.cn.weeklyplan.bean;

import java.util.List;
import viviant.cn.weeklyplan.bean.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ROLE.
 */
public class Role {

    private Long id;
    /** Not-null value. */
    private String roleName;
    /** Not-null value. */
    private String establishDate;
    private String roleDescription;
    private Boolean flagAvailiable;
    private Integer state;
    private long userinfoRId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RoleDao myDao;

    private List<Planthing> planthings;

    public Role() {
    }

    @Override
    public String toString() { //为什么要重写toString()呢？因为适配器在显示数据的时候，如果传入适配器的对象不是字符串的情况下，直接就使用对象.toString()
        // TODO Auto-generated method stub
        return roleName;
    }

    public Role(Long id) {
        this.id = id;
    }

    public Role(Long id, String roleName, String establishDate, String roleDescription, Boolean flagAvailiable, Integer state, long userinfoRId) {
        this.id = id;
        this.roleName = roleName;
        this.establishDate = establishDate;
        this.roleDescription = roleDescription;
        this.flagAvailiable = flagAvailiable;
        this.state = state;
        this.userinfoRId = userinfoRId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRoleDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getRoleName() {
        return roleName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setRoleName(String roleName) {
        this.roleName = roleName;
    }

    /** Not-null value. */
    public String getEstablishDate() {
        return establishDate;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setEstablishDate(String establishDate) {
        this.establishDate = establishDate;
    }

    public String getRoleDescription() {
        return roleDescription;
    }

    public void setRoleDescription(String roleDescription) {
        this.roleDescription = roleDescription;
    }

    public Boolean getFlagAvailiable() {
        return flagAvailiable;
    }

    public void setFlagAvailiable(Boolean flagAvailiable) {
        this.flagAvailiable = flagAvailiable;
    }

    public Integer getState() {
        return state;
    }

    public void setState(Integer state) {
        this.state = state;
    }

    public long getUserinfoRId() {
        return userinfoRId;
    }

    public void setUserinfoRId(long userinfoRId) {
        this.userinfoRId = userinfoRId;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Planthing> getPlanthings() {
        if (planthings == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PlanthingDao targetDao = daoSession.getPlanthingDao();
            List<Planthing> planthingsNew = targetDao._queryRole_Planthings(id);
            synchronized (this) {
                if(planthings == null) {
                    planthings = planthingsNew;
                }
            }
        }
        return planthings;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPlanthings() {
        planthings = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
