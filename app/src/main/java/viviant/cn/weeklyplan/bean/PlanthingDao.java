package viviant.cn.weeklyplan.bean;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import viviant.cn.weeklyplan.bean.Planthing;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PLANTHING.
*/
public class PlanthingDao extends AbstractDao<Planthing, Long> {

    public static final String TABLENAME = "PLANTHING";

    /**
     * Properties of entity Planthing.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PlanthingName = new Property(1, String.class, "planthingName", false, "PLANTHING_NAME");
        public final static Property PlanthingDescription = new Property(2, String.class, "planthingDescription", false, "PLANTHING_DESCRIPTION");
        public final static Property DoDateTime = new Property(3, String.class, "doDateTime", false, "DO_DATE_TIME");
        public final static Property EndDateTime = new Property(4, String.class, "endDateTime", false, "END_DATE_TIME");
        public final static Property PlanThingPlace = new Property(5, String.class, "planThingPlace", false, "PLAN_THING_PLACE");
        public final static Property FlagRemind = new Property(6, Boolean.class, "flagRemind", false, "FLAG_REMIND");
        public final static Property RemindDate = new Property(7, String.class, "remindDate", false, "REMIND_DATE");
        public final static Property State = new Property(8, Integer.class, "state", false, "STATE");
        public final static Property LevelId = new Property(9, long.class, "levelId", false, "LEVEL_ID");
        public final static Property TagId = new Property(10, long.class, "tagId", false, "TAG_ID");
        public final static Property RoleId = new Property(11, long.class, "roleId", false, "ROLE_ID");
        public final static Property UserinfoPId = new Property(12, long.class, "userinfoPId", false, "USERINFO_PID");
    };

    private DaoSession daoSession;

    private Query<Planthing> level_PlanthingsQuery;
    private Query<Planthing> tag_PlanthingsQuery;
    private Query<Planthing> role_PlanthingsQuery;
    private Query<Planthing> userinfo_PlanthingsQuery;

    public PlanthingDao(DaoConfig config) {
        super(config);
    }
    
    public PlanthingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PLANTHING' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PLANTHING_NAME' TEXT NOT NULL ," + // 1: planthingName
                "'PLANTHING_DESCRIPTION' TEXT," + // 2: planthingDescription
                "'DO_DATE_TIME' TEXT NOT NULL ," + // 3: doDateTime
                "'END_DATE_TIME' TEXT NOT NULL ," + // 4: endDateTime
                "'PLAN_THING_PLACE' TEXT," + // 5: planThingPlace
                "'FLAG_REMIND' INTEGER," + // 6: flagRemind
                "'REMIND_DATE' TEXT," + // 7: remindDate
                "'STATE' INTEGER," + // 8: state
                "'LEVEL_ID' INTEGER NOT NULL ," + // 9: levelId
                "'TAG_ID' INTEGER NOT NULL ," + // 10: tagId
                "'ROLE_ID' INTEGER NOT NULL ," + // 11: roleId
                "'USERINFO_PID' INTEGER NOT NULL );"); // 12: userinfoPId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PLANTHING'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Planthing entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPlanthingName());
 
        String planthingDescription = entity.getPlanthingDescription();
        if (planthingDescription != null) {
            stmt.bindString(3, planthingDescription);
        }
        stmt.bindString(4, entity.getDoDateTime());
        stmt.bindString(5, entity.getEndDateTime());
 
        String planThingPlace = entity.getPlanThingPlace();
        if (planThingPlace != null) {
            stmt.bindString(6, planThingPlace);
        }
 
        Boolean flagRemind = entity.getFlagRemind();
        if (flagRemind != null) {
            stmt.bindLong(7, flagRemind ? 1l: 0l);
        }
 
        String remindDate = entity.getRemindDate();
        if (remindDate != null) {
            stmt.bindString(8, remindDate);
        }
 
        Integer state = entity.getState();
        if (state != null) {
            stmt.bindLong(9, state);
        }
        stmt.bindLong(10, entity.getLevelId());
        stmt.bindLong(11, entity.getTagId());
        stmt.bindLong(12, entity.getRoleId());
        stmt.bindLong(13, entity.getUserinfoPId());
    }

    @Override
    protected void attachEntity(Planthing entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Planthing readEntity(Cursor cursor, int offset) {
        Planthing entity = new Planthing( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // planthingName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // planthingDescription
            cursor.getString(offset + 3), // doDateTime
            cursor.getString(offset + 4), // endDateTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // planThingPlace
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // flagRemind
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // remindDate
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // state
            cursor.getLong(offset + 9), // levelId
            cursor.getLong(offset + 10), // tagId
            cursor.getLong(offset + 11), // roleId
            cursor.getLong(offset + 12) // userinfoPId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Planthing entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPlanthingName(cursor.getString(offset + 1));
        entity.setPlanthingDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDoDateTime(cursor.getString(offset + 3));
        entity.setEndDateTime(cursor.getString(offset + 4));
        entity.setPlanThingPlace(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFlagRemind(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setRemindDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setState(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setLevelId(cursor.getLong(offset + 9));
        entity.setTagId(cursor.getLong(offset + 10));
        entity.setRoleId(cursor.getLong(offset + 11));
        entity.setUserinfoPId(cursor.getLong(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Planthing entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Planthing entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "planthings" to-many relationship of Level. */
    public List<Planthing> _queryLevel_Planthings(long levelId) {
        synchronized (this) {
            if (level_PlanthingsQuery == null) {
                QueryBuilder<Planthing> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.LevelId.eq(null));
                level_PlanthingsQuery = queryBuilder.build();
            }
        }
        Query<Planthing> query = level_PlanthingsQuery.forCurrentThread();
        query.setParameter(0, levelId);
        return query.list();
    }

    /** Internal query to resolve the "planthings" to-many relationship of Tag. */
    public List<Planthing> _queryTag_Planthings(long tagId) {
        synchronized (this) {
            if (tag_PlanthingsQuery == null) {
                QueryBuilder<Planthing> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TagId.eq(null));
                tag_PlanthingsQuery = queryBuilder.build();
            }
        }
        Query<Planthing> query = tag_PlanthingsQuery.forCurrentThread();
        query.setParameter(0, tagId);
        return query.list();
    }

    /** Internal query to resolve the "planthings" to-many relationship of Role. */
    public List<Planthing> _queryRole_Planthings(long roleId) {
        synchronized (this) {
            if (role_PlanthingsQuery == null) {
                QueryBuilder<Planthing> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.RoleId.eq(null));
                role_PlanthingsQuery = queryBuilder.build();
            }
        }
        Query<Planthing> query = role_PlanthingsQuery.forCurrentThread();
        query.setParameter(0, roleId);
        return query.list();
    }

    /** Internal query to resolve the "planthings" to-many relationship of Userinfo. */
    public List<Planthing> _queryUserinfo_Planthings(long userinfoPId) {
        synchronized (this) {
            if (userinfo_PlanthingsQuery == null) {
                QueryBuilder<Planthing> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserinfoPId.eq(null));
                userinfo_PlanthingsQuery = queryBuilder.build();
            }
        }
        Query<Planthing> query = userinfo_PlanthingsQuery.forCurrentThread();
        query.setParameter(0, userinfoPId);
        return query.list();
    }

}
