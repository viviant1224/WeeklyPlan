package viviant.cn.weeklyplan.bean;

import java.io.Serializable;
import java.util.List;
import viviant.cn.weeklyplan.bean.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table USERINFO.
 */
public class Userinfo implements Serializable{

    private Long id;
    /** Not-null value. */
    private String username;
    private String sex;
    private String userEmail;
    private String userImage;
    private String registerDate;
    private Boolean flagVip;
    private Boolean flagLogout;
    private Integer state;
    private String telphone;
    private String address;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserinfoDao myDao;

    private List<Planthing> planthings;
    private List<Role> roles;
    private List<Tag> tags;

    public Userinfo() {
    }

    public Userinfo(Long id) {
        this.id = id;
    }

    public Userinfo(Long id, String username, String sex, String userEmail, String userImage, String registerDate, Boolean flagVip, Boolean flagLogout, Integer state, String telphone, String address) {
        this.id = id;
        this.username = username;
        this.sex = sex;
        this.userEmail = userEmail;
        this.userImage = userImage;
        this.registerDate = registerDate;
        this.flagVip = flagVip;
        this.flagLogout = flagLogout;
        this.state = state;
        this.telphone = telphone;
        this.address = address;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserinfoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getUsername() {
        return username;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUsername(String username) {
        this.username = username;
    }

    public String getSex() {
        return sex;
    }

    public void setSex(String sex) {
        this.sex = sex;
    }

    public String getUserEmail() {
        return userEmail;
    }

    public void setUserEmail(String userEmail) {
        this.userEmail = userEmail;
    }

    public String getUserImage() {
        return userImage;
    }

    public void setUserImage(String userImage) {
        this.userImage = userImage;
    }

    public String getRegisterDate() {
        return registerDate;
    }

    public void setRegisterDate(String registerDate) {
        this.registerDate = registerDate;
    }

    public Boolean getFlagVip() {
        return flagVip;
    }

    public void setFlagVip(Boolean flagVip) {
        this.flagVip = flagVip;
    }

    public Boolean getFlagLogout() {
        return flagLogout;
    }

    public void setFlagLogout(Boolean flagLogout) {
        this.flagLogout = flagLogout;
    }

    public Integer getState() {
        return state;
    }

    public void setState(Integer state) {
        this.state = state;
    }

    public String getTelphone() {
        return telphone;
    }

    public void setTelphone(String telphone) {
        this.telphone = telphone;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Planthing> getPlanthings() {
        if (planthings == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PlanthingDao targetDao = daoSession.getPlanthingDao();
            List<Planthing> planthingsNew = targetDao._queryUserinfo_Planthings(id);
            synchronized (this) {
                if(planthings == null) {
                    planthings = planthingsNew;
                }
            }
        }
        return planthings;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPlanthings() {
        planthings = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Role> getRoles() {
        if (roles == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RoleDao targetDao = daoSession.getRoleDao();
            List<Role> rolesNew = targetDao._queryUserinfo_Roles(id);
            synchronized (this) {
                if(roles == null) {
                    roles = rolesNew;
                }
            }
        }
        return roles;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetRoles() {
        roles = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Tag> getTags() {
        if (tags == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TagDao targetDao = daoSession.getTagDao();
            List<Tag> tagsNew = targetDao._queryUserinfo_Tags(id);
            synchronized (this) {
                if(tags == null) {
                    tags = tagsNew;
                }
            }
        }
        return tags;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTags() {
        tags = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
